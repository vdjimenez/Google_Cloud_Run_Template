steps:
  # Install dependencies
  - name: python
    entrypoint: pip
    args: ["install", "-r", "requirements.txt", "--user"]
  # Run unit tests
  - name: python
    entrypoint: python
    args: ["-m", "pytest", "--junitxml=${SHORT_SHA}_test_log.xml"] 
  # Docker build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:${SHORT_SHA}', '.']
  # Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push',  '${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:${SHORT_SHA}']
  # Deploy to Cloud Run
  - name: google/cloud-sdk
    entrypoint: gcloud
    args: 
    - 'run'
    - 'deploy'
    - '${_SERVICE_NAME}'
    - '--image=${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:${SHORT_SHA}'
    - '--region=${_LOCATION}'
    - '--platform=managed'
    - '--allow-unauthenticated'
# Save test logs to Google Cloud Storage
artifacts:
  objects:
    location: gs://${_BUCKET_NAME}/
    paths:
      - ${SHORT_SHA}_test_log.xml
substitutions:
  _LOCATION: europe-southwest1 # Madrid
  _PROJECT_ID: <PROJECT NAME>
  _ARTIFACT_REGISTRY_REPO: <ARTIFACT REGISTRY REPO NAME>
  _SERVICE_NAME: <SERVICE NAME>
# Store images in Google Artifact Registry 
images:
  - ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:${SHORT_SHA}